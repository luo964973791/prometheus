# nginx.yaml - 创建一个Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: nginx

---
# nginx-deployment.yaml - 创建一个使用特定镜像的Deployment，包括资源请求和资源限制
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: richarvey/nginx-php-fpm  # 在这里指定你想要使用的Nginx镜像
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              memory: "128Mi"  # 设置资源请求
              cpu: "250m"
            limits:
              memory: "256Mi"  # 设置资源限制
              cpu: "500m"
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/sites-enabled
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config  # 这里指定ConfigMap的名称
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In    # 亲和,只调度到kubernetes.io/hostname=node1的node,反亲和是NotIn
                    values:
                      - node1

---
# nginx-configmap.yaml - 创建一个ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx
data:
  # 在这里定义你的Nginx配置
  default.conf: |
    server {
        listen       80;
        listen  [::]:80 default ipv6only=on;

        root /var/www/html;
        index index.php index.html index.htm;

        location /stub_status {
            stub_status on;
        }

        # Make site accessible from http://localhost/
        server_name _;

        # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
        sendfile off;

        # Add stdout logging
        error_log /dev/stdout info;
        access_log /dev/stdout;

        # Add option for x-forward-for (real ip when behind elb)
        #real_ip_header X-Forwarded-For;
        #set_real_ip_from 172.16.0.0/12;

        # block access to sensitive information about git
        location /.git {
           deny all;
           return 403;
        }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to index.html
            try_files $uri $uri/ =404;
        }

        error_page 404 /404.html;
        location = /404.html {
            root /var/www/errors;
            internal;
        }

        location ^~ /sad.svg {
            alias /var/www/errors/sad.svg;
            access_log off;
        }
        location ^~ /twitter.svg {
            alias /var/www/errors/twitter.svg;
            access_log off;
        }
        location ^~ /github.svg {
            alias /var/www/errors/github.svg;
            access_log off;
        }

        # pass the PHP scripts to FastCGI server listening on socket
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_index index.php;
            include fastcgi_params;
        }

        location ~* \.(jpg|jpeg|gif|png|css|js|ico|webp|tiff|ttf|svg)$ {
            expires           5d;
        }

        # deny access to . files, for security
        location ~ /\. {
            log_not_found off;
            deny all;
        }

        location ^~ /.well-known {
            allow all;
            auth_basic off;
        }
    }

---
# nginx-service.yaml - 创建一个Nginx服务并使用LoadBalancer类型暴露
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
